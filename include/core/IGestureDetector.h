#ifndef IGESTURE_DETECTOR_H
#define IGESTURE_DETECTOR_H

#include "InputEvent.h"
#include "ControlMessage.h"
#include <vector>

/**
 * @file IGestureDetector.h
 * @brief Interface for detecting high-level gestures from raw input events
 * 
 * Converts low-level InputEvents (button press/release with timing) into
 * high-level semantic control messages that represent user intentions.
 * This abstraction allows the sequencer business logic to work with
 * conceptual operations rather than button states and timing.
 * 
 * Key Responsibilities:
 * - Detect tap vs hold gestures based on timing
 * - Recognize chord patterns (multiple buttons pressed simultaneously)
 * - Handle parameter lock entry/exit based on hold duration
 * - Generate semantic ControlMessages for the sequencer
 * - Maintain gesture state across multiple input events
 * 
 * Design Principles:
 * - Stateful gesture recognition with timing awareness
 * - Configuration-driven thresholds for timing detection
 * - One or more ControlMessages per InputEvent (context-dependent)
 * - Platform-agnostic - works with any InputEvent source
 */

/**
 * @brief Interface for high-level gesture detection and semantic message generation
 * 
 * Processes raw InputEvents from the input layer and translates them into
 * semantic ControlMessages that represent user intentions. This provides
 * the translation layer between physical input and business logic.
 * 
 * The gesture detector maintains state across events to recognize patterns
 * like holds, double-taps, and chord combinations that span multiple events.
 */
class IGestureDetector {
public:
    virtual ~IGestureDetector() = default;
    
    /**
     * @brief Process input event and generate control messages
     * 
     * Takes a single InputEvent and generates zero or more ControlMessages
     * based on gesture recognition. The detector maintains internal state
     * to recognize multi-event patterns like holds and chords.
     * 
     * @param inputEvent Raw input event from input layer
     * @param controlMessages Output vector to receive generated control messages
     * @return Number of control messages generated
     */
    virtual uint8_t processInputEvent(const InputEvent& inputEvent, 
                                     std::vector<ControlMessage::Message>& controlMessages) = 0;
    
    /**
     * @brief Update gesture detection state based on time passage
     * 
     * Called periodically to handle time-based gesture recognition like
     * hold detection timeouts, double-tap windows, and chord detection.
     * Should be called regularly even when no input events occur.
     * 
     * @param currentTime Current time in milliseconds
     * @param controlMessages Output vector for any time-triggered messages
     * @return Number of control messages generated by timeout events
     */
    virtual uint8_t updateTiming(uint32_t currentTime,
                                std::vector<ControlMessage::Message>& controlMessages) = 0;
    
    /**
     * @brief Reset all gesture detection state
     * 
     * Clears all pending gestures, timing state, and button tracking.
     * Useful for mode changes or error recovery.
     */
    virtual void reset() = 0;
    
    /**
     * @brief Get current button states tracked by gesture detector
     * 
     * @param buttonStates Output array for button states (true = pressed)
     * @param maxButtons Size of the buttonStates array
     * @return Number of buttons for which state was returned
     */
    virtual uint8_t getCurrentButtonStates(bool* buttonStates, uint8_t maxButtons) const = 0;
    
    /**
     * @brief Check if gesture detector is currently in parameter lock mode
     * 
     * Parameter lock mode affects how subsequent input events are interpreted.
     * In parameter lock mode, button presses adjust parameters rather than
     * toggle steps.
     * 
     * @return true if in parameter lock mode
     */
    virtual bool isInParameterLockMode() const = 0;
    
    /**
     * @brief Update gesture detector configuration
     * 
     * @param config New configuration to apply
     */
    virtual void setConfiguration(const struct InputSystemConfiguration& config) = 0;
};

#endif // IGESTURE_DETECTOR_H